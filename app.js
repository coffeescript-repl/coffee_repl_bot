// Generated by CoffeeScript 1.7.1
(function() {
  var BOT_ID, CoffeeScript, Sandbox, Twitter, compile, cs2js, cutStr, logging, main, reg, request, sandbox, tweet, twit, unescapeCharRef;

  Twitter = require("twitter");

  CoffeeScript = require("coffee-script");

  request = require("request");

  Sandbox = require("./sandbox");

  BOT_ID = "coffee_repl";

  reg = new RegExp("@" + BOT_ID + "\\s+([\\s\\S]+)");

  twit = new Twitter(require("./" + BOT_ID + "_key"));

  sandbox = new Sandbox((function(_this) {
    return function(result) {
      return _this.tweet(result);
    };
  })(this));

  main = function() {
    tweet("restarted. " + Date());
    setInterval((function() {
      if ((new Date()).getMinutes() === 0) {
        return tweet("periodical report. " + Date());
      }
    }), 60 * 1000);
    return twit.stream("user", function(stream) {
      return stream.on("data", function(_arg) {
        var id_str, screen_name, text, user;
        id_str = _arg.id_str, user = _arg.user, text = _arg.text;
        if ((text != null) && screen_name !== BOT_ID && reg.test(text)) {
          screen_name = user.screen_name;
          logging("onTweet", [id_str, screen_name, text]);
          return compile(unescapeCharRef(reg.exec(text)[1]), function(_arg1) {
            var data, error;
            data = _arg1.data, error = _arg1.error;
            if (error != null) {
              return tweet("@" + screen_name + " " + data, {
                "in_reply_to_status_id": id_str
              });
            } else {
              logging("JavaScript", [data]);
              return sandbox["eval"](data, function(result) {
                return tweet("@" + screen_name + " " + result, {
                  "in_reply_to_status_id": id_str
                });
              });
            }
          });
        }
      });
    });
  };

  logging = function(id, ary) {
    if (ary == null) {
      ary = [];
    }
    console.log("######## " + id + " ########");
    console.log("## " + (Date()));
    return ary.forEach(function(v) {
      return console.log("## " + v);
    });
  };

  tweet = function(str, opt, i) {
    var _str;
    if (opt == null) {
      opt = {};
    }
    if (i == null) {
      i = 0;
    }
    _str = cutStr(140, str);
    logging("sendTweet", [str]);
    twit.updateStatus(_str, opt, function(data) {
      var delay;
      if (data.statusCode == null) {
        return logging("succeeded");
      } else {
        logging("failed", [data]);
        delay = Math.pow(i, 2) * 600;
        logging("retrying", [delay]);
        return setTimeout(((function(_this) {
          return function() {
            return tweet("." + _str, opt, i + 1);
          };
        })(this)), delay);
      }
    });
    return void 0;
  };

  cutStr = function(n, str) {
    if (str.length <= n) {
      return str;
    } else {
      return str.substr(0, n - 3) + "...";
    }
  };

  cs2js = function(csCode) {
    return CoffeeScript.compile(csCode.split("\n").join("\n  "), {
      bare: true
    });
  };

  unescapeCharRef = function(str) {
    return [["&quot;", '"'], ["&amp;", "&"], ["&apos;", "'"], ["&lt;", "<"], ["&gt;", ">"]].reduce(((function(_this) {
      return function(_str, _arg) {
        var after, before;
        before = _arg[0], after = _arg[1];
        return _str.split(before).join(after);
      };
    })(this)), str);
  };

  compile = function(code, next) {
    var csCode, data, err, url;
    if (url = (/^\.import\s+([\S]+)/.exec(code) || ["", false])[1]) {
      logging("wget", [url]);
      request(url, function(error, response, body) {
        if (!error && response.statusCode === 200) {
          return next({
            data: body
          });
        } else {
          return next({
            error: true,
            data: error
          });
        }
      });
    } else {
      csCode = "\n" + code + "\n";
      logging("CoffeeScript", [csCode]);
      try {
        data = cs2js(csCode);
        setImmediate(function() {
          return next({
            data: data
          });
        });
      } catch (_error) {
        err = _error;
        setImmediate(function() {
          return next({
            error: true,
            data: "" + err
          });
        });
      }
    }
    return void 0;
  };

  main();

}).call(this);

//# sourceMappingURL=app.map
