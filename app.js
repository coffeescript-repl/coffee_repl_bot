// Generated by CoffeeScript 1.6.3
(function() {
  var CoffeeScript, LiveScript, ReplBot, Sandbox, Twitter;

  Twitter = require("twitter");

  CoffeeScript = require("coffee-script");

  LiveScript = require("LiveScript");

  Sandbox = require("./sandbox");

  ReplBot = (function() {
    var unescapeCharRef;

    function ReplBot(BOT_ID) {
      var _this = this;
      this.BOT_ID = BOT_ID;
      this.REG = RegExp("@" + this.BOT_ID + "\\s+([\\s\\S]+)");
      this.compiler = CoffeeScript;
      this.twit = new Twitter(require("./" + this.BOT_ID + "_key"));
      this.sandbox = new Sandbox(function(results) {
        console.log("######## setTimeout ######## " + Date());
        return _this.tweet(results.join("\n"));
      });
      this.tweet("restarted.", {});
      this.twit.stream("user", function(stream) {
        return stream.on("data", function(data) {
          if ((data.text != null) && data.user.screen_name !== _this.BOT_ID && _this.REG.test(data.text)) {
            return _this.reply(data);
          }
        });
      });
    }

    ReplBot.prototype.reply = function(data) {
      var csCode, err, jsCode,
        _this = this;
      console.log("######## OnReply ######## " + Date());
      console.log("# " + data.id_str);
      console.log("# " + data.user.screen_name);
      console.log("# " + data.text);
      console.log("## CoffeeScript");
      console.log(csCode = "\n" + unescapeCharRef(this.REG.exec(data.text)[1]) + "\n");
      if (/[\"\']use coffeescript[\"\']/i.test(csCode)) {
        this.compiler = CoffeeScript;
      } else if (/[\"\']use livescript[\"\']/i.test(csCode)) {
        this.compiler = LiveScript;
      }
      console.log("## JavaScript");
      try {
        console.log(jsCode = this.compiler.compile(csCode.split("\n").join("\n  "), {
          bare: true
        }));
      } catch (_error) {
        err = _error;
        console.log(err);
        return this.tweet(("@" + data.user.screen_name + " ") + err, {
          "in_reply_to_status_id": data.id_str
        });
      }
      console.log("## Sandbox");
      return this.sandbox["eval"](jsCode, function(results) {
        console.log(results);
        return _this.tweet("@" + data.user.screen_name + " " + (results.join("\n")), {
          "in_reply_to_status_id": data.id_str
        });
      });
    };

    ReplBot.prototype.tweet = function(str, opt, i) {
      var _str,
        _this = this;
      if (i == null) {
        i = 0;
      }
      _str = str.length <= 140 ? str : str.substr(0, 137) + "...";
      console.log("######## SendMessage ######## " + Date());
      console.log("# " + i);
      console.log("# " + _str);
      return this.twit.updateStatus(_str, opt, function(data) {
        if (data.statusCode == null) {
          return console.log("## Success");
        } else {
          console.log(data);
          return setTimeout((function() {
            return _this.tweet("." + _str, opt, i + 1);
          }), i * 2500);
        }
      });
    };

    unescapeCharRef = function(str) {
      var dic, k, v;
      dic = {
        "&quot;": '"',
        "&amp;": "&",
        "&apos;": "'",
        "&lt;": "<",
        "&gt;": ">"
      };
      for (k in dic) {
        v = dic[k];
        str = str.split(k).join(v);
      }
      return str;
    };

    return ReplBot;

  })();

  new ReplBot("coffee_repl");

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
