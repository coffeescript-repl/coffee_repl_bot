// Generated by CoffeeScript 1.6.3
(function() {
  var CoffeeScript, Sandbox, Twitter, request;

  Twitter = require("twitter");

  CoffeeScript = require("coffee-script");

  request = require("request");

  Sandbox = require("./sandbox");

  ({
    BOT_ID: "coffee_repl",
    init: function() {
      var _this = this;
      this.reg = RegExp("@" + this.BOT_ID + "\\s+([\\s\\S]+)");
      this.twit = new Twitter(require("./" + this.BOT_ID + "_key"));
      this.sandbox = new Sandbox(function(result) {
        return _this.tweet(result);
      });
      this.tweet("restarted. " + Date());
      return this.twit.stream("user", function(stream) {
        return stream.on("data", function(_arg) {
          var id_str, screen_name, text, user;
          id_str = _arg.id_str, user = _arg.user, text = _arg.text;
          if ((text != null) && screen_name !== _this.BOT_ID && _this.reg.test(text)) {
            screen_name = user.screen_name;
            console.log("######## onTweet ########");
            console.log("## " + Date());
            console.log("## " + id_str);
            console.log("## " + screen_name);
            console.log("## " + text);
            return _this.compile(_this.unescapeCharRef(_this.reg.exec(text)[1]), function(_arg1) {
              var data, error;
              data = _arg1.data, error = _arg1.error;
              if (error != null) {
                return _this.tweet("@" + screen_name + " " + data, {
                  "in_reply_to_status_id": id_str
                });
              } else {
                console.log("## JavaScript");
                console.log(data);
                return _this.sandbox["eval"](data, function(result) {
                  return _this.tweet("@" + screen_name + " " + result, {
                    "in_reply_to_status_id": id_str
                  });
                });
              }
            });
          }
        });
      });
    },
    compile: function(code, next) {
      var csCode, data, err, url;
      if (url = (/^\.import\s+([\S]+)/.exec(code) || ["", false])[1]) {
        console.log("## wget " + url);
        return request(url, function(error, response, body) {
          if (!error && response.statusCode === 200) {
            return next({
              data: body
            });
          } else {
            return next({
              error: true,
              data: error
            });
          }
        });
      } else {
        console.log("## !wget " + url);
        console.log("## CoffeeScript");
        console.log(csCode = "\n" + code + "\n");
        try {
          data = this.cs2js(csCode);
          setImmediate(function() {
            return next({
              data: data
            });
          });
        } catch (_error) {
          err = _error;
          setImmediate(function() {
            return next({
              error: true,
              data: "" + err
            });
          });
        }
        return void 0;
      }
    },
    tweet: function(str, opt, i) {
      var _str,
        _this = this;
      if (opt == null) {
        opt = {};
      }
      if (i == null) {
        i = 0;
      }
      _str = this.cutStr(140, str);
      console.log("######## sendTweet ########");
      console.log("## " + Date());
      console.log("## " + str);
      this.twit.updateStatus(_str, opt, function(data) {
        if (data.statusCode == null) {
          return console.log("## succeeded.");
        } else {
          console.log("## failed.");
          console.log(data);
          console.log("## retrying..." + Math.pow(i, 2) * 600);
          return setTimeout((function() {
            return _this.tweet("." + _str, opt, i + 1);
          }), Math.pow(i, 2) * 600);
        }
      });
      return void 0;
    },
    cutStr: function(n, str) {
      if (str.length <= n) {
        return str;
      } else {
        return str.substr(0, n - 3) + "...";
      }
    },
    cs2js: function(csCode) {
      return CoffeeScript.compile(csCode.split("\n").join("\n  "), {
        bare: true
      });
    },
    unescapeCharRef: function(str) {
      var _this = this;
      return [["&quot;", '"'], ["&amp;", "&"], ["&apos;", "'"], ["&lt;", "<"], ["&gt;", ">"]].reduce((function(_str, _arg) {
        var after, before;
        before = _arg[0], after = _arg[1];
        return _str.split(before).join(after);
      }), str);
    }
  }).init();

}).call(this);
