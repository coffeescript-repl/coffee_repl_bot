// Generated by CoffeeScript 1.7.1
(function() {
  var util, vm,
    __slice = [].slice;

  util = require("util");

  vm = require("vm");

  ({
    isEvaluating: false,
    logs: [],
    init: function() {
      var sandbox;
      sandbox = this.createSandbox();
      return process.on("message", (function(_this) {
        return function(data) {
          var err;
          _this.isEvaluating = true;
          try {
            _this.logs.push(util.inspect(vm.runInNewContext(data, sandbox)));
          } catch (_error) {
            err = _error;
            _this.logs.push(err.stack);
          }
          process.send(_this.logs.join("\n"));
          _this.logs = [];
          return _this.isEvaluating = false;
        };
      })(this));
    },
    createSandbox: function() {
      var env, tids;
      tids = [];
      env = {
        _: require("underscore"),
        ls: require("prelude-ls"),
        async: require("async"),
        CoffeeScript: require("coffee-script"),
        setTimeout: function() {
          var args, callback, delay;
          callback = arguments[0], delay = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
          if (delay == null) {
            delay = 1000;
          }
          if (delay < 1000) {
            delay = 1000;
          }
          tids.push(setTimeout.apply(null, [callback, delay].concat(args)));
          return tids[tids.length - 1];
        },
        clearTimeout: clearTimeout,
        getTimeouts: function() {
          return tids.slice(0);
        },
        console: {
          log: (function(_this) {
            return function() {
              var str;
              str = Array.prototype.map.call(arguments, function(v) {
                if (typeof v === "string") {
                  return v;
                } else {
                  return util.inspect(v);
                }
              }).join(", ");
              if (_this.isEvaluating) {
                _this.logs.push(str);
              } else {
                process.send(str);
              }
              return void 0;
            };
          })(this)
        }
      };
      env.global = env;
      return env;
    }
  }).init();

}).call(this);

//# sourceMappingURL=shovel.map
